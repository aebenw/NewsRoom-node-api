{"version":3,"sources":["../server/graph.js"],"names":["server","ApolloServer","typeDefs","resolvers","dataSources","newsAPI","NewsAPI","listen","then","url","console","log","module","exports"],"mappings":";;AAGA;;AACA;;AACA;;;;AALA;AACA;AAOA,MAAMA,MAAM,GAAG,IAAIC,0BAAJ,CAAiB;AAC5BC,EAAAA,QAAQ,EAARA,iBAD4B;AAE5BC,EAAAA,SAAS,EAATA,kBAF4B;AAG5BC,EAAAA,WAAW,EAAE,OAAO;AAClBC,IAAAA,OAAO,EAAE,IAAIC,gBAAJ;AADS,GAAP;AAHe,CAAjB,CAAf;AAQAN,MAAM,CAACO,MAAP,GAAgBC,IAAhB,CAAqB,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAW;AAC9BC,EAAAA,OAAO,CAACC,GAAR,CAAa,qBAAoBF,GAAI,EAArC;AACD,CAFD;AAKAG,MAAM,CAACC,OAAP,GAAiBb,MAAjB","sourcesContent":["// Testing out Apollo, seeing if there's a good integration for it\n// Hope to build a server and choose between normal API or Apollo\n\nimport { ApolloServer } from 'apollo-server'\nimport { typeDefs, resolvers } from './graphql'\nimport NewsAPI from './graphql/dataSources/newsAPI'\n\n\nconst server = new ApolloServer({\n    typeDefs,\n    resolvers,\n    dataSources: () => ({\n      newsAPI: new NewsAPI()\n    }) \n  })\n\nserver.listen().then(({url}) => {\n  console.log(`Apollo Running on ${url}`)\n})\n\n\nmodule.exports = server;\n"],"file":"graph.js"}