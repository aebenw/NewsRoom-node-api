{"version":3,"sources":["../../server/tests/RoutesUsers.test.js"],"names":["request","require","app","user","article","source","before","done","then","res","result","response","describe","it","post","send","email","end","err","status","to","eq","body","have","property","userID","_id","articleID","message","name","title","sourceID","be","an"],"mappings":"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","sourcesContent":["const request = require('supertest');\nimport chai, { expect } from 'chai';\nconst {app} = require('../server');\nimport { Comment, User } from '../models'\nimport  {checkUsers, checkArticles, checkSource}  from '../config/testConfig'\n\n\nlet user;\nlet article;\nlet source\nbefore((done) => {\n  checkUsers().then(res => {\n    user = res\n    checkArticles().then(result => {\n      article = result\n      checkSource().then(response => {\n        source = response\n        done()\n      })\n    })\n  })\n})\n\ndescribe('user Routes',  () => {\n\n  describe('/user/login',  () => {\n    it('returns back a user object',  (done) => {\n      request(app)\n      .post(`/user/login`)\n      .send({email: user.email })\n      .end((err, res) => {\n        expect(res.status).to.eq(200)\n        expect(res.body).to.have.property('email')\n        done()\n      })\n    })\n  })\n\n  describe('user can fav an article', () => {\n    it('links a user to a source', (done) => {\n      request(app)\n      .post('/user/favArticle')\n      .send({userID: user._id, articleID: article._id})\n      .end((err, res) => {\n        expect(res.status).to.eq(200)\n        expect(res.body).to.have.property('message')\n        expect(res.body.message).to.eq(`${user.name} likes ${article.title}`)\n        done()\n      })\n    })\n  })\n\n  describe('user can follow a Source', () => {\n    it('links a user to a source', (done) => {\n      request(app)\n      .post('/user/followSource')\n      .send({userID: user._id, sourceID: source._id})\n      .end((err, res) => {\n        expect(res.status).to.eq(200)\n        expect(res.body).to.have.property('users')\n        .to.be.an('array')\n        // .that.nested.includes(user._id)\n        // expect(res.body.users).to.include(user._id)\n        done()\n      })\n    })\n  })\n})\n"],"file":"RoutesUsers.test.js"}