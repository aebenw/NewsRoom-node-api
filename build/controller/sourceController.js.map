{"version":3,"sources":["../../server/controller/sourceController.js"],"names":["newsapi","NewsAPI","process","env","NEWS_API","callSources","req","res","response","v2","sources","language","country","category","answer","Source","findOrCreateWithCat","status","send","showSource","id","params","source","findById","populate","path","select","exec","err","posts","JSON","stringify","undefined","searchSources","find","body","client","hgetall","obj"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;;;AAHA,MAAMA,OAAO,GAAG,IAAIC,gBAAJ,CAAYC,OAAO,CAACC,GAAR,CAAYC,QAAxB,CAAhB;;AAMO,MAAMC,WAAW,GAAG,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAE7C,MAAIC,QAAQ,GAAG,MAAMR,OAAO,CAACS,EAAR,CAAWC,OAAX,CAAmB;AACtCC,IAAAA,QAAQ,EAAE,IAD4B;AAEtCC,IAAAA,OAAO,EAAE,IAF6B;AAGtCC,IAAAA,QAAQ,EAAE;AAH4B,GAAnB,CAArB;AAMA,MAAIC,MAAM,GAAG,MAAM,mCAAaN,QAAQ,CAACE,OAAtB,EAA+BK,eAAOC,mBAAtC,CAAnB;AAEAT,EAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBJ,MAArB,EAV6C,CAY7C;AACA;AACA;AACD,CAfM;;;;AAiBA,MAAMK,UAAU,GAAG,CAACb,GAAD,EAAMC,GAAN,KAAc;AACtC,QAAMa,EAAE,GAAGd,GAAG,CAACe,MAAJ,CAAWD,EAAtB;;AACA,MAAIE,MAAM,GAAGP,eAAOQ,QAAP,CAAgBH,EAAhB,CAAb;;AACAE,EAAAA,MAAM,CACLE,QADD,CACU;AAACC,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,MAAM,EAAE;AAA3B,GADV,EAECC,IAFD,CAEM,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACpBtB,IAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBY,IAAI,CAACC,SAAL,CAAeF,KAAf,EAAsBG,SAAtB,EAAiC,CAAjC,CAArB;AACD,GAJD;AAKD,CARM;;;;AAWA,MAAMC,aAAa,GAAG,OAAO3B,GAAP,EAAYC,GAAZ,KAAoB;AAC/C,MAAIG,OAAO,GAAG,MAAMK,eAAOmB,IAAP,CAAY;AAACd,IAAAA,EAAE,EAAEd,GAAG,CAAC6B,IAAJ,CAASb;AAAd,GAAZ,CAApB;;AACAc,iBAAOC,OAAP,CAAe/B,GAAG,CAAC6B,IAAJ,CAASb,MAAxB,EAAgC,CAACM,GAAD,EAAMU,GAAN,KAAc;AAC5C/B,IAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBoB,GAArB;AACD,GAFD;AAGD,CALM","sourcesContent":["import NewsAPI from 'newsapi';\nconst newsapi = new NewsAPI(process.env.NEWS_API);\nimport { Source }  from '../models';\nimport { asyncMapping } from './connectingFuncs'\nimport { client } from '../server'\n\n\nexport const callSources = async (req, res) => {\n\n  let response = await newsapi.v2.sources({\n    language: 'en',\n    country: 'us',\n    category: \"general\"\n  })\n\n  let answer = await asyncMapping(response.sources, Source.findOrCreateWithCat)\n\n  res.status(200).send(answer)\n\n  // Redis Caching not ready for production\n  // let cachedSources = JSON.stringify(answer)\n  // client.set('sources', cachedSources)\n};\n\nexport const showSource = (req, res) => {\n  const id = req.params.id;\n  let source = Source.findById(id)\n  source\n  .populate({path: 'articles', select: \"author title description url urlToImage content\"})\n  .exec((err, posts) => {\n    res.status(200).send(JSON.stringify(posts, undefined, 2));\n  });\n}\n\n\nexport const searchSources = async (req, res) => {\n  let sources = await Source.find({id: req.body.source})\n  client.hgetall(req.body.source, (err, obj) => {\n    res.status(200).send(obj)\n  })\n}\n"],"file":"sourceController.js"}